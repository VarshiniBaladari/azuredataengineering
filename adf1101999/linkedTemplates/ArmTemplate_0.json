{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf1101999"
		},
		"dataflowinput1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dataflowinput1'"
		},
		"destinationlinkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'destinationlinkedservice'"
		},
		"source linked service_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'source linked service'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/appendActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input",
							"value": {
								"value": "@int(pipeline().parameters.appendP)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "output",
							"value": {
								"value": "@variables('input')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"appendP": {
						"type": "string"
					}
				},
				"variables": {
					"input": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6
						]
					},
					"output": {
						"type": "Array"
					},
					"pname": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Control Flow Activities"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/setVariableActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lenghtV",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "length",
							"value": {
								"value": "@pipeline().parameters.lengthP",
								"type": "Expression"
							}
						}
					},
					{
						"name": "areaV",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lenghtV",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "breadthV",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "area",
							"value": {
								"value": "@mul(variables('length'),variables('breadth') )",
								"type": "Expression"
							}
						}
					},
					{
						"name": "breadthV",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "breadth",
							"value": {
								"value": "@pipeline().parameters.breadthP",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"lengthP": {
						"type": "int"
					},
					"breadthP": {
						"type": "int"
					}
				},
				"variables": {
					"length": {
						"type": "Integer"
					},
					"breadth": {
						"type": "Integer"
					},
					"area": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Control Flow Activities"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowinput1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('dataflowinput1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/destinationlinkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('destinationlinkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source linked service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('source linked service_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataflowinput1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "department.csv",
						"container": "dataflowinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "deptID",
						"type": "String"
					},
					{
						"name": "deptName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dataflowinput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonFileLinkedService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataflowinput1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dataflowoutput"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dataflowinput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataflowinput1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"container": "dataflowinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empID",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "deptID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dataflowinput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetjoinedsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataflowinput1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dataflowoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dataflowinput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/destinationdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "destinationlinkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": "destinationcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/destinationlinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataflowinput1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales_data.csv",
						"container": "dataflowinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "SalePersonFName",
						"type": "String"
					},
					{
						"name": "SalePersonLName",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "ItemsSold",
						"type": "String"
					},
					{
						"name": "SoldPrice",
						"type": "String"
					},
					{
						"name": "SoldDate",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dataflowinput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/schemadriftsinkdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataflowinput1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dataflowoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empID",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "deptID",
						"type": "String"
					},
					{
						"name": "deptName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dataflowinput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourcedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "source linked service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "flowers2.txt",
						"folderPath": "source",
						"container": "sourcecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/source linked service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Data Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"description": "Copy data from source container to destination container",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "destinationdataset",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Copy Data"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/destinationdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"contentMD5",
								"structure",
								"size",
								"itemType",
								{
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pname",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pname": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Control Flow Activities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset1",
								"type": "DatasetReference"
							},
							"name": "datasetemp"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "datasetdept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "datasetjoinedsink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empID as string,",
						"          name as string,",
						"          country as string,",
						"          deptID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> datasetemp",
						"source(output(",
						"          deptID as string,",
						"          deptName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> datasetdept",
						"datasetemp, datasetdept join(datasetemp@deptID == datasetdept@deptID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(country = upper(country)) ~> ModifyColumns1",
						"ModifyColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['final.csv'],",
						"     dateFormat:'MM/dd/yyyy',",
						"     timestampFormat:'MM/dd/yyyy',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/datasetjoinedsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_column_pattern')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "here we discuss about the how to apply a transformation on more than one column of table. Here we apply transformation on set of columns.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "salesdata",
								"type": "DatasetReference"
							},
							"name": "columnpatterndataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "schemadriftsinkdataset",
								"type": "DatasetReference"
							},
							"name": "columnpatternsink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          SalePersonFName as string,",
						"          SalePersonLName as string,",
						"          ProductName as string,",
						"          ItemsSold as short,",
						"          SoldPrice as short,",
						"          SoldDate as date,",
						"          City as string,",
						"          State as string,",
						"          Country as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> columnpatterndataset",
						"columnpatterndataset derive(each(match(type=='string'), $$ + 'pattern' = trim($$, \".\"))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empID as string,",
						"          name as string,",
						"          country as string,",
						"          deptID as string,",
						"          deptName as string",
						"     ),",
						"     partitionFileNames:['columpattern.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> columnpatternsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesdata')]",
				"[concat(variables('factoryId'), '/datasets/schemadriftsinkdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_derived_column')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "here we are going to explore derived column transformations",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "salesdata",
								"type": "DatasetReference"
							},
							"name": "datasetderivedcolumn"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JsonFileLinkedService",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "concatname"
						},
						{
							"name": "ConcatColumWithFunc"
						},
						{
							"name": "HierarchicalData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          SalePersonFName as string,",
						"          SalePersonLName as string,",
						"          ProductName as string,",
						"          ItemsSold as string,",
						"          SoldPrice as string,",
						"          SoldDate as string,",
						"          City as string,",
						"          State as string,",
						"          Country as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> datasetderivedcolumn",
						"datasetderivedcolumn derive({Full name} = SalePersonFName + \" \" + SalePersonLName) ~> concatname",
						"concatname derive(ConcatFullName = concatWS(\" \",SalePersonFName, SalePersonLName)) ~> ConcatColumWithFunc",
						"ConcatColumWithFunc derive({Hierarchical Data} = @(City1=City,",
						"          Region1=Region)) ~> HierarchicalData",
						"HierarchicalData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HierarchicalData.json'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesdata')]",
				"[concat(variables('factoryId'), '/datasets/JsonFileLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_derived_column_replace_nulls')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "here in tis dataflow we are replacing the null values in a column with some data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "salesdata",
								"type": "DatasetReference"
							},
							"name": "datasetserivedcolumn"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "schemadriftsinkdataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "replacenullsalepersonfname"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          SalePersonFName as string,",
						"          SalePersonLName as string,",
						"          ProductName as string,",
						"          ItemsSold as string,",
						"          SoldPrice as string,",
						"          SoldDate as string,",
						"          City as string,",
						"          State as string,",
						"          Country as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> datasetserivedcolumn",
						"datasetserivedcolumn derive(SalePersonFName = iifNull(SalePersonFName, \"unknown\")) ~> replacenullsalepersonfname",
						"replacenullsalepersonfname sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empID as string,",
						"          name as string,",
						"          country as string,",
						"          deptID as string,",
						"          deptName as string",
						"     ),",
						"     partitionFileNames:['ReplaceNulls.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesdata')]",
				"[concat(variables('factoryId'), '/datasets/schemadriftsinkdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_schemadrift')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "example of schema drift with just a source and sink.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "salesdata",
								"type": "DatasetReference"
							},
							"name": "datasetschemadrift"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "schemadriftsinkdataset",
								"type": "DatasetReference"
							},
							"name": "schemadriftsink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          SalePersonFName as string,",
						"          SalePersonLName as string,",
						"          ProductName as string,",
						"          ItemsSold as string,",
						"          SoldPrice as string,",
						"          SoldDate as string,",
						"          City as string,",
						"          State as string,",
						"          Country as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> datasetschemadrift",
						"datasetschemadrift sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empID as string,",
						"          name as string,",
						"          country as string,",
						"          deptID as string,",
						"          deptName as string",
						"     ),",
						"     partitionFileNames:['schemadrift_final csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> schemadriftsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesdata')]",
				"[concat(variables('factoryId'), '/datasets/schemadriftsinkdataset')]"
			]
		}
	]
}